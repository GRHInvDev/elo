import type { Server } from 'socket.io'
import type { Notification } from '@prisma/client'

/**
 * Servi√ßo para emitir notifica√ß√µes via WebSocket
 * Usado pelas rotas tRPC para enviar notifica√ß√µes em tempo real
 */
export class NotificationWebSocketService {
  private io: Server

  constructor(io: Server) {
    this.io = io
  }

  /**
   * Emite uma nova notifica√ß√£o via WebSocket
   * TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
   */
  async emitNewNotification(notification: Notification) {
    // TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
    console.log('üîï [NOTIFICATIONS DISABLED] WebSocket notification emission disabled:', notification.title)
    return
    
    /*
    // Import notificationUsers dynamically to avoid circular dependency
    const { notificationUsers }: { notificationUsers: Map<string, string> } = await import('../websocket/chat-server')

    // Encontrar socket do usu√°rio destinat√°rio
    const recipientSocketId = Array.from(notificationUsers.entries())
      .find(([_socketId, userId]) => userId === notification.userId)?.[0]

    if (recipientSocketId) {
      this.io.to(recipientSocketId).emit('notification', {
        type: 'new',
        notification: {
          ...notification,
          createdAt: notification.createdAt.toISOString(),
          updatedAt: notification.updatedAt.toISOString()
        }
      })
    }
    */
  }

  /**
   * Atualiza a contagem de notifica√ß√µes n√£o lidas para um usu√°rio
   * TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
   */
  async updateUnreadCount(userId: string) {
    // TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
    console.log('üîï [NOTIFICATIONS DISABLED] WebSocket unread count update disabled for user:', userId)
    return
    
    /*
    // Import notificationUsers and prisma dynamically
    const [{ notificationUsers }, { PrismaClient }] = await Promise.all([
      import('../websocket/chat-server'),
      import('@prisma/client')
    ])
    const prisma = new PrismaClient()

    // Encontrar socket do usu√°rio
    const userSocketId = Array.from(notificationUsers.entries())
      .find(([_socketId, id]) => id === userId)?.[0]

    if (userSocketId) {
      void prisma.notification.count({
        where: { userId, isRead: false }
      }).then((unreadCount: number) => {
        this.io.to(userSocketId).emit('unreadCountUpdate', { count: unreadCount })
      }).catch((error: Error) => {
        console.error('Erro ao atualizar contagem de notifica√ß√µes:', error)
      })
    }
    */
  }

  /**
   * Emite notifica√ß√£o de atualiza√ß√£o (ex: marcada como lida)
   * TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
   */
  async emitNotificationUpdate(notification: Notification) {
    // TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
    console.log('üîï [NOTIFICATIONS DISABLED] WebSocket notification update disabled:', notification.title)
    return
    
    /*
    // Import notificationUsers dynamically to avoid circular dependency
    const { notificationUsers }: { notificationUsers: Map<string, string> } = await import('../websocket/chat-server')

    // Encontrar socket do usu√°rio
    const recipientSocketId = Array.from(notificationUsers.entries())
      .find(([_socketId, userId]) => userId === notification.userId)?.[0]

    if (recipientSocketId) {
      this.io.to(recipientSocketId).emit('notification', {
        type: 'update',
        notification: {
          ...notification,
          createdAt: notification.createdAt.toISOString(),
          updatedAt: notification.updatedAt.toISOString()
        }
      })
    }
    */
  }

  /**
   * Emite notifica√ß√£o de exclus√£o
   * TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
   */
  async emitNotificationDelete(notification: Notification) {
    // TEMPORARIAMENTE DESATIVADO - Notifica√ß√µes WebSocket desabilitadas
    console.log('üîï [NOTIFICATIONS DISABLED] WebSocket notification delete disabled:', notification.title)
    return
    
    /*
    // Import notificationUsers dynamically to avoid circular dependency
    const { notificationUsers }: { notificationUsers: Map<string, string> } = await import('../websocket/chat-server')

    // Encontrar socket do usu√°rio
    const recipientSocketId = Array.from(notificationUsers.entries())
      .find(([_socketId, userId]) => userId === notification.userId)?.[0]

    if (recipientSocketId) {
      this.io.to(recipientSocketId).emit('notification', {
        type: 'delete',
        notification: {
          ...notification,
          createdAt: notification.createdAt.toISOString(),
          updatedAt: notification.updatedAt.toISOString()
        }
      })
    }
    */
  }
}

// Inst√¢ncia global (ser√° inicializada quando o servidor WebSocket for criado)
let notificationWebSocketService: NotificationWebSocketService | null = null

/**
 * Inicializa o servi√ßo de notifica√ß√µes WebSocket
 */
export function initializeNotificationWebSocketService(io: Server) {
  notificationWebSocketService = new NotificationWebSocketService(io)
  console.log('üîî Servi√ßo de notifica√ß√µes WebSocket inicializado')
}

/**
 * Obt√©m a inst√¢ncia do servi√ßo de notifica√ß√µes WebSocket
 */
export function getNotificationWebSocketService(): NotificationWebSocketService | null {
  return notificationWebSocketService
}
