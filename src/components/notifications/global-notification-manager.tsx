"use client"

import { useEffect } from "react"
import { useNotifications } from "@/hooks/use-notifications"
import { useUser } from "@clerk/nextjs"

/**
 * Componente global que gerencia notifica√ß√µes independentemente do dropdown
 * Garante que as notifica√ß√µes funcionem sempre, n√£o apenas quando o dropdown est√° aberto
 * Agora usa WebSocket para tempo real quando dispon√≠vel
 */
export function GlobalNotificationManager() {
  const { user } = useUser()

  // Hook que gerencia todas as notifica√ß√µes globalmente com WebSocket (exclusivamente)
  const {
    isWebSocketConnected,
    isUsingWebSocket,
    reconnectWebSocket,
    error
  } = useNotifications({
    limit: 1, // S√≥ precisamos da contagem, n√£o da lista completa
    enableSound: true,
    enableBrowserNotifications: true,
    userId: user?.id
  })

  // Log do status da conex√£o WebSocket
  useEffect(() => {
    if (isUsingWebSocket) {
      console.log('üîî Sistema de notifica√ß√µes: WebSocket ativo e funcionando')
    } else if (isWebSocketConnected) {
      console.log('üîî Sistema de notifica√ß√µes: WebSocket conectado, aguardando registro')
    } else {
      console.log('‚ö†Ô∏è Sistema de notifica√ß√µes: WebSocket n√£o conectado')
    }
  }, [isWebSocketConnected, isUsingWebSocket])

  // Tentar reconectar se houver erro de conex√£o
  useEffect(() => {
    if (error && !isWebSocketConnected) {
      console.log('üîÑ Tentando reconectar WebSocket devido a erro:', error)
      const timeoutId = setTimeout(() => {
        reconnectWebSocket()
      }, 5000) // Tentar reconectar ap√≥s 5 segundos

      return () => clearTimeout(timeoutId)
    }
  }, [error, isWebSocketConnected, reconnectWebSocket])

  // Este componente n√£o renderiza nada visualmente
  // Ele apenas garante que o hook useNotifications esteja sempre ativo
  // e que as notifica√ß√µes sejam processadas globalmente via WebSocket exclusivamente
  return null
}
