generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  role          UserRole  @default(USER)
  posts         Post[]
  events        Event[]
  flyers        Flyer[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  birthDay      Birthday?
  reactions     Reaction[]
  comments      Coment[]
  enterprise    Enterprise @default(NA)
  vehicleRents  VehicleRent[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

enum Enterprise {
  NA
  Box
  RHenz
  Cristallux
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  capacity    Int
  floor       Int
  coordinates Json      // {x: number, y: number, width: number, height: number}
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("rooms")
}

model Booking {
  id        String   @id @default(cuid())
  title     String
  start     DateTime
  end       DateTime
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Post {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  published     Boolean  @default(false)
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reactions     Reaction[]
  comments      Coment[]
  reactionCount Int     @default(0)
  commentsCount Int     @default(0)

  @@map("posts")
}

model Reaction {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String 
  emoji   String

  @@unique([userId, postId])
}

model Coment {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String 
  comment String

  @@unique([userId, postId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  location    String
  startDate   DateTime
  endDate     DateTime
  published   Boolean   @default(false)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Flyer {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String
  iframe      String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("flyers")
}

model Birthday {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  name      String
  data      DateTime

  @@map("birthdays")
}

model Vehicle {
  id          String   @id @default(cuid())
  model       String
  plate       String   @unique
  imageUrl    String
  enterprise  Enterprise
  kilometers  BigInt
  availble    Boolean  @default(true)
  rents       VehicleRent[]

  @@map("vehicles")
}

model VehicleRent {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId   String
  startDate   DateTime    @default(now())
  endDate     DateTime?
  finished    Boolean     @default(false)
  initialKm   BigInt?
  finalKm     BigInt?
  endLocation Json?

  @@map("vehicle_rents")
}