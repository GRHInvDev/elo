generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id
  email            String             @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  role_config      Json?              // Configuração granular de roles
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  enterprise       Enterprise         @default(NA)
  setor            String?            @db.VarChar
  comments         Coment[]
  reactions        Reaction[]
  birthDay         Birthday?
  bookings         Booking[]
  events           Event[]
  flyers           Flyer[]
  foodOrders       FoodOrder[]
  forms            Form[]
  formResponses    FormResponse[]
  FormResponseChat FormResponseChat[]
  posts            Post[]
  sells            Sell?
  shopCart         ShopCart?
  vehicleRents     VehicleRent[]
  authoredSuggestions Suggestion[] @relation("SuggestionAuthor")
  analyzedSuggestions Suggestion[] @relation("SuggestionAnalyst")
  extension       BigInt              @default(0) // ramal do usuario
  emailExtension   String?            // email personalizado para exibição no ramal
  nameExtension      String?            // nome personalizado para exibição no ramal
  setorExtension      String?            // setor personalizado para exibição no ramal

  // Notificações
  notifications Notification[]
  notificationPreferences NotificationPreference?

  // Chat
  chatMessages        chat_message[]     @relation("ChatMessageUser")
  createdChatGroups   chat_group[]       @relation("ChatGroupCreator")
  chatGroupMemberships chat_group_member[] @relation("ChatGroupMembers")
  addedGroupMembers   chat_group_member[] @relation("ChatGroupMemberAdder")

  // Ramais personalizados
  customExtensions    custom_extension[]

  // Novo colaborador
  newCollaborator     NewCollaborator?

  @@map("users")
}

model GlobalConfig {
  id          String @unique @default(cuid())
  shopWebhook String
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?
  capacity    Int
  floor       Int
  coordinates Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  filial      String    @default("SCS")
  bookings    Booking[]

  @@map("rooms")
}

model Booking {
  id        String   @id @default(cuid())
  title     String
  start     DateTime
  end       DateTime
  roomId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Post {
  id            String     @id @default(cuid())
  title         String
  content       String
  published     Boolean    @default(false)
  authorId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  commentsCount Int        @default(0)
  reactionCount Int        @default(0)
  viewCount     Int        @default(0)
  lastViewedAt  DateTime?
  imageUrl      String?    // Mantido para compatibilidade com posts existentes
  images        PostImage[] // Novas imagens múltiplas
  comments      Coment[]
  reactions     Reaction[]
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostImage {
  id        String   @id @default(cuid())
  postId    String
  imageUrl  String
  order     Int      @default(0) // Ordem das imagens no carrossel
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_images")
}

model Reaction {
  id     String @id @default(cuid())
  userId String
  postId String
  emoji  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Coment {
  id      String @id @default(cuid())
  userId  String
  postId  String
  comment String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Flyer {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  iframe      String?
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("flyers")
}

model Birthday {
  id       String   @id @default(cuid())
  userId   String?  @unique
  name     String
  data     DateTime
  imageUrl String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("birthdays")
}

model Vehicle {
  id         String        @id @default(cuid())
  model      String
  plate      String        @unique
  imageUrl   String
  enterprise Enterprise
  kilometers BigInt
  availble   Boolean       @default(true)
  rents      VehicleRent[]

  @@map("vehicles")
}

model VehicleRent {
  id          String    @id @default(cuid())
  userId      String
  vehicleId   String
  startDate   DateTime  @default(now())
  endDate     DateTime?
  finished    Boolean   @default(false)
  endLocation Json?
  finalKm     BigInt?
  initialKm   BigInt?
  destiny     String    @default("")
  driver      String    @default("")
  observation Json?
  passangers  String?
  possibleEnd DateTime?
  regIniKm    BigInt?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_rents")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  enterprise  Enterprise
  imageUrl    String[]
  sells       Sell[]     @relation("ProductToSell")
  shopCarts   ShopCart[] @relation("ProductToShopCart")

  @@map("products")
}

model ShopCart {
  id         String    @id @default(cuid())
  userId     String    @unique
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[] @relation("ProductToShopCart")

  @@map("shop_cart")
}

model Sell {
  id         String    @id @default(cuid())
  userId     String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  totalPrice Float
  nfeId      Int?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[] @relation("ProductToSell")

  @@map("sells")
}

model Form {
  id                String         @id @default(cuid())
  userId            String
  title             String
  description       String?
  fields            Json[]         @db.Json
  isPrivate         Boolean        @default(false)
  allowedUsers      String[]       @default([])
  allowedSectors    String[]       @default([])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses         FormResponse[]

  @@map("forms")
}

model FormResponse {
  id               String             @id @default(cuid())
  userId           String
  responses        Json[]             @db.Json
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  formId           String
  status           ResponseStatus     @default(NOT_STARTED)
  statusComment    String?
  form             Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  FormResponseChat FormResponseChat[]

  @@map("forms_responses")
}

model FormResponseChat {
  id             String       @id @default(cuid())
  userId         String
  formResponseId String
  message        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forms_responses_chat")
}

model Restaurant {
  id          String      @id @default(cuid())
  name        String
  description String?
  city        String
  address     String
  phone       String
  email       String
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      FoodOrder[]
  menuItems   MenuItem[]

  @@map("restaurants")
}

model MenuItem {
  id           String           @id @default(cuid())
  name         String
  description  String?
  price        Float
  category     String
  available    Boolean          @default(true)
  restaurantId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  weekDay      Int              @default(1)
  orders       FoodOrder[]
  options      MenuItemOption[]
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model MenuItemOption {
  id          String                 @id @default(cuid())
  name        String
  description String?
  required    Boolean                @default(false)
  multiple    Boolean                @default(false)
  menuItemId  String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  choices     MenuItemOptionChoice[]
  menuItem    MenuItem               @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("menu_item_options")
}

model MenuItemOptionChoice {
  id              String                 @id @default(cuid())
  name            String
  priceModifier   Float                  @default(0)
  available       Boolean                @default(true)
  optionId        String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  option          MenuItemOption         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  orderSelections OrderOptionSelection[]

  @@map("menu_item_option_choices")
}

model FoodOrder {
  id               String                 @id @default(cuid())
  userId           String
  restaurantId     String
  menuItemId       String
  orderDate        DateTime
  orderTime        DateTime
  status           OrderStatus            @default(PENDING)
  observations     String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  menuItem         MenuItem               @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  restaurant       Restaurant             @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  optionSelections OrderOptionSelection[]

  @@unique([userId, orderDate])
  @@map("food_orders")
}

model OrderOptionSelection {
  id        String               @id @default(cuid())
  orderId   String
  choiceId  String
  createdAt DateTime             @default(now())
  choice    MenuItemOptionChoice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  order     FoodOrder            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_option_selections")
}

model OrderLog {
  id          String   @id @default(cuid())
  userId      String
  userName    String
  userEmail   String
  month       Int
  year        Int
  totalOrders Int      @default(0)
  totalValue  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, month, year])
  @@map("order_logs")
}



enum Enterprise {
  NA
  Box
  RHenz
  Cristallux
  Box_Filial
  Cristallux_Filial                
}

enum ResponseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum SuggestionStatus {
  NEW
  IN_REVIEW
  APPROVED
  IN_PROGRESS
  DONE
  NOT_IMPLEMENTED
}

model Suggestion {
  id                  String            @id @default(cuid())
  ideaNumber          Int               @unique @default(0)

  // relação com autor
  userId              String
  user                User              @relation("SuggestionAuthor", fields: [userId], references: [id], onDelete: Cascade)

  // identificação visível/oculta
  submittedName       String?
  submittedSector     String?
  isNameVisible       Boolean           @default(true)

  description         String  // Solução proposta
  problem             String? // Problema identificado
  contribution        Json?
  dateRef             DateTime?

  impact              Json?
  capacity            Json?
  effort              Json?
  kpis                Json?

  finalScore          Int?
  finalClassification Json?

  status              SuggestionStatus  @default(NEW)
  rejectionReason     String?

  analystId           String?
  analyst             User?             @relation("SuggestionAnalyst", fields: [analystId], references: [id])

  // Campos de pagamento (para Ideias concluídas)
  payment             Json?             // { status: "paid" | "unpaid", amount?: number, description?: string }
  paymentDate         DateTime?

  // Relacionamento many-to-many com KPIs
  kpiLinks            SuggestionKpi[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([status, createdAt])
  @@index([finalScore])
}

// Modelo para KPIs reutilizáveis
model Kpi {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)

  // Relacionamento m-m com Ideias
  suggestions SuggestionKpi[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}

// Tabela de junção para relacionamento m-m entre Ideias e KPIs
model SuggestionKpi {
  id           String    @id @default(cuid())
  suggestionId String
  kpiId        String

  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  kpi          Kpi        @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  createdAt    DateTime   @default(now())

  @@unique([suggestionId, kpiId])
  @@index([suggestionId])
  @@index([kpiId])
}

// Modelos para classificações dinâmicas
enum ClassificationType {
  IMPACT
  CAPACITY
  EFFORT
}

model Classification {
  id          String            @id @default(cuid())
  label       String
  score       Int               @db.SmallInt
  type        ClassificationType
  isActive    Boolean           @default(true)
  order       Int               @default(0)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@unique([label, type])
  @@index([type, isActive, order])
}

// Módulo de Notificações
enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SUGGESTION_CREATED
  SUGGESTION_UPDATED
  SUGGESTION_APPROVED
  SUGGESTION_REJECTED
  KPI_ADDED
  CLASSIFICATION_UPDATED
  COMMENT_ADDED
  SYSTEM_MAINTENANCE
  CHAT_MESSAGE
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
}

model Notification {
  id          String             @id @default(cuid())
  title       String
  message     String
  type        NotificationType   @default(INFO)
  channel     NotificationChannel @default(IN_APP)
  isRead      Boolean            @default(false)
  data        Json?              // Dados adicionais da notificação
  userId      String
  entityId    String?            // ID da entidade relacionada (sugestão, kpi, etc)
  entityType  String?            // Tipo da entidade (suggestion, kpi, etc)
  actionUrl   String?            // URL para redirecionar ao clicar

  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

// Configurações de notificação por usuário
model NotificationPreference {
  id                   String             @id @default(cuid())
  userId               String             @unique
  emailNotifications   Boolean            @default(true)
  pushNotifications    Boolean            @default(true)
  suggestionUpdates    Boolean            @default(true)
  systemNotifications  Boolean            @default(true)
  postNotifications    Boolean            @default(true)
  bookingNotifications Boolean            @default(true)
  foodOrderNotifications Boolean          @default(true)
  birthdayNotifications Boolean           @default(true)
  soundEnabled         Boolean            @default(true)
  popupEnabled         Boolean            @default(true)
  // Tipos específicos de notificação
  successNotifications Boolean            @default(true)
  errorNotifications   Boolean            @default(true)
  warningNotifications Boolean            @default(true)
  suggestionNotifications Boolean         @default(true)
  kpiNotifications     Boolean            @default(true)
  maintenanceNotifications Boolean        @default(true)

  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model chat_group {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    isActive    Boolean  @default(true)

    // Relacionamentos
    createdBy   User            @relation("ChatGroupCreator", fields: [createdById], references: [id])
    members     chat_group_member[]
    messages    chat_message[]

    @@index([createdById])
    @@index([isActive])
    @@map("chat_groups")
}

model chat_group_member {
    id        String   @id @default(cuid())
    groupId   String
    userId    String
    joinedAt  DateTime @default(now())
    addedById String   // Quem adicionou o usuário ao grupo

    // Relacionamentos
    group     chat_group @relation(fields: [groupId], references: [id], onDelete: Cascade)
    user      User      @relation("ChatGroupMembers", fields: [userId], references: [id], onDelete: Cascade)
    addedBy   User      @relation("ChatGroupMemberAdder", fields: [addedById], references: [id])

    @@unique([groupId, userId])
    @@index([groupId])
    @@index([userId])
    @@map("chat_group_members")
}

model chat_message {
    id        String   @id @default(cuid())
    content   String?  // Agora opcional, pois mensagens podem ter apenas imagens
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    roomId    String   @default("global") // Mantém compatibilidade com chat global
    groupId   String?  // Referência ao grupo (null para chat global)
    imageUrl  String?  // URL da imagem anexada à mensagem
    fileUrl   String?  // URL do arquivo anexado à mensagem
    fileName  String?  // Nome original do arquivo
    fileSize  Int?     // Tamanho do arquivo em bytes
    fileType  String?  // Tipo MIME do arquivo

    // Relacionamentos
    user      User         @relation("ChatMessageUser", fields: [userId], references: [id], onDelete: Cascade)
    group     chat_group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@index([roomId, createdAt])
    @@index([groupId, createdAt])
    @@index([userId, createdAt])
    @@map("chat_messages")
}

// Ramais personalizados criados manualmente
model custom_extension {
  id          String   @id @default(cuid())
  name        String   // Nome do contato/ramal personalizado
  email       String?  // Email opcional
  extension   BigInt   // Número do ramal/telefone
  description String?  // Descrição opcional
  setor       String?  // Setor do contato (opcional)
  createdById String   // ID do usuário que criou
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([setor])
  @@map("custom_extensions")
}

// Model para rastrear colaboradores novos
model NewCollaborator {
  id        String   @id @default(cuid())
  userId    String   @unique
  isNew     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isNew])
  @@map("new_collaborators")
}