generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id
  email               String             @unique
  firstName           String?
  lastName            String?
  imageUrl            String?
  role                UserRole           @default(USER)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  enterprise          Enterprise         @default(NA)
  setor               String?            @db.VarChar
  comments            Coment[]
  reactions           Reaction[]
  analyzedSuggestions Suggestion[]       @relation("SuggestionAnalyst")
  authoredSuggestions Suggestion[]       @relation("SuggestionAuthor")
  birthDay            Birthday?
  bookings            Booking[]
  events              Event[]
  flyers              Flyer[]
  foodOrders          FoodOrder[]
  forms               Form[]
  formResponses       FormResponse[]
  FormResponseChat    FormResponseChat[]
  posts               Post[]
  sells               Sell?
  shopCart            ShopCart?
  vehicleRents        VehicleRent[]

  @@map("users")
}

model GlobalConfig {
  id          String @unique @default(cuid())
  shopWebhook String
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?
  capacity    Int
  floor       Int
  coordinates Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  filial      String    @default("SCS")
  bookings    Booking[]

  @@map("rooms")
}

model Booking {
  id        String   @id @default(cuid())
  title     String
  start     DateTime
  end       DateTime
  roomId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Post {
  id            String     @id @default(cuid())
  title         String
  content       String
  published     Boolean    @default(false)
  authorId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  commentsCount Int        @default(0)
  reactionCount Int        @default(0)
  imageUrl      String?
  comments      Coment[]
  reactions     Reaction[]
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Reaction {
  id     String @id @default(cuid())
  userId String
  postId String
  emoji  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Coment {
  id      String @id @default(cuid())
  userId  String
  postId  String
  comment String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Flyer {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  iframe      String?
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("flyers")
}

model Birthday {
  id       String   @id @default(cuid())
  userId   String?  @unique
  name     String
  data     DateTime
  imageUrl String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("birthdays")
}

model Vehicle {
  id         String        @id @default(cuid())
  model      String
  plate      String        @unique
  imageUrl   String
  enterprise Enterprise
  kilometers BigInt
  availble   Boolean       @default(true)
  rents      VehicleRent[]

  @@map("vehicles")
}

model VehicleRent {
  id          String    @id @default(cuid())
  userId      String
  vehicleId   String
  startDate   DateTime  @default(now())
  endDate     DateTime?
  finished    Boolean   @default(false)
  endLocation Json?
  finalKm     BigInt?
  initialKm   BigInt?
  destiny     String    @default("")
  driver      String    @default("")
  observation Json?
  passangers  String?
  possibleEnd DateTime?
  regIniKm    BigInt?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_rents")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  enterprise  Enterprise
  imageUrl    String[]
  sells       Sell[]     @relation("ProductToSell")
  shopCarts   ShopCart[] @relation("ProductToShopCart")

  @@map("products")
}

model ShopCart {
  id         String    @id @default(cuid())
  userId     String    @unique
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[] @relation("ProductToShopCart")

  @@map("shop_cart")
}

model Sell {
  id         String    @id @default(cuid())
  userId     String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  totalPrice Float
  nfeId      Int?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[] @relation("ProductToSell")

  @@map("sells")
}

model Form {
  id          String         @id @default(cuid())
  userId      String
  title       String
  description String?
  fields      Json[]         @db.Json
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   FormResponse[]

  @@map("forms")
}

model FormResponse {
  id               String             @id @default(cuid())
  userId           String
  responses        Json[]             @db.Json
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  formId           String
  status           ResponseStatus     @default(NOT_STARTED)
  statusComment    String?
  form             Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  FormResponseChat FormResponseChat[]

  @@map("forms_responses")
}

model FormResponseChat {
  id             String       @id @default(cuid())
  userId         String
  formResponseId String
  message        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forms_responses_chat")
}

model Restaurant {
  id          String      @id @default(cuid())
  name        String
  description String?
  city        String
  address     String
  phone       String
  email       String
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      FoodOrder[]
  menuItems   MenuItem[]

  @@map("restaurants")
}

model MenuItem {
  id           String           @id @default(cuid())
  name         String
  description  String?
  price        Float
  category     String
  available    Boolean          @default(true)
  restaurantId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  weekDay      Int              @default(1)
  orders       FoodOrder[]
  options      MenuItemOption[]
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model MenuItemOption {
  id          String                 @id @default(cuid())
  name        String
  description String?
  required    Boolean                @default(false)
  multiple    Boolean                @default(false)
  menuItemId  String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  choices     MenuItemOptionChoice[]
  menuItem    MenuItem               @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("menu_item_options")
}

model MenuItemOptionChoice {
  id              String                 @id @default(cuid())
  name            String
  priceModifier   Float                  @default(0)
  available       Boolean                @default(true)
  optionId        String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  option          MenuItemOption         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  orderSelections OrderOptionSelection[]

  @@map("menu_item_option_choices")
}

model FoodOrder {
  id               String                 @id @default(cuid())
  userId           String
  restaurantId     String
  menuItemId       String
  orderDate        DateTime
  orderTime        DateTime
  status           OrderStatus            @default(PENDING)
  observations     String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  menuItem         MenuItem               @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  restaurant       Restaurant             @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  optionSelections OrderOptionSelection[]

  @@unique([userId, orderDate])
  @@map("food_orders")
}

model OrderOptionSelection {
  id        String               @id @default(cuid())
  orderId   String
  choiceId  String
  createdAt DateTime             @default(now())
  choice    MenuItemOptionChoice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  order     FoodOrder            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_option_selections")
}

model OrderLog {
  id          String   @id @default(cuid())
  userId      String
  userName    String
  userEmail   String
  month       Int
  year        Int
  totalOrders Int      @default(0)
  totalValue  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, month, year])
  @@map("order_logs")
}

model Suggestion {
  id                  String           @id @default(cuid())
  ideaNumber          Int              @unique
  userId              String
  submittedName       String?
  submittedSector     String?
  isNameVisible       Boolean          @default(true)
  description         String
  contribution        Json
  dateRef             DateTime?
  impact              Json?
  capacity            Json?
  effort              Json?
  kpis                Json?
  finalScore          Int?
  finalClassification Json?
  status              SuggestionStatus @default(NEW)
  rejectionReason     String?
  analystId           String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  analyst             User?            @relation("SuggestionAnalyst", fields: [analystId], references: [id])
  user                User             @relation("SuggestionAuthor", fields: [userId], references: [id], onDelete: Cascade)
  kpiLinks            SuggestionKpi[]

  @@index([status, createdAt])
  @@index([finalScore])
}

model Kpi {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  suggestions SuggestionKpi[]

  @@index([isActive])
}

model SuggestionKpi {
  id           String     @id @default(cuid())
  suggestionId String
  kpiId        String
  createdAt    DateTime   @default(now())
  kpi          Kpi        @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@unique([suggestionId, kpiId])
  @@index([suggestionId])
  @@index([kpiId])
}

model Classification {
  id        String             @id @default(cuid())
  label     String
  score     Int                @db.SmallInt
  type      ClassificationType
  isActive  Boolean            @default(true)
  order     Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([label, type])
  @@index([type, isActive, order])
}

enum UserRole {
  ADMIN
  USER
  TOTEM
}

enum Enterprise {
  NA
  Box
  RHenz
  Cristallux
  Box_Distribuidor          @map("Box Distribuidor")
  Box_Distribuidor___Filial @map("Box Distribuidor - Filial")
  Box_Filial
}

enum ResponseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum SuggestionStatus {
  NEW
  IN_REVIEW
  APPROVED
  IN_PROGRESS
  DONE
  NOT_IMPLEMENTED
}

enum ClassificationType {
  IMPACT
  CAPACITY
  EFFORT
}
