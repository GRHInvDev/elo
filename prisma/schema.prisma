generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  role          UserRole  @default(USER)
  posts         Post[]
  events        Event[]
  flyers        Flyer[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  birthDay      Birthday?
  reactions     Reaction[]
  comments      Coment[]
  enterprise    Enterprise @default(NA)
  vehicleRents  VehicleRent[]
  shopCart      ShopCart?
  sells         Sell[]
  forms         Form[]
  formResponses FormResponse[]
  foodOrders    FoodOrder[]

  @@map("users")
  FormResponseChat FormResponseChat[]
}

enum UserRole {
  ADMIN
  USER
  TOTEM
}

enum Enterprise {
  NA
  Box
  RHenz
  Cristallux
}

model GlobalConfig  {
  id            String    @unique @default(cuid())
  shopWebhook   String
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  capacity    Int
  floor       Int
  coordinates Json      // {x: number, y: number, width: number, height: number}
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("rooms")
}

model Booking {
  id        String   @id @default(cuid())
  title     String
  start     DateTime
  end       DateTime
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Post {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  published     Boolean  @default(false)
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  createdAt     DateTime @default(now())
  imageUrl      String?
  updatedAt     DateTime @updatedAt
  reactions     Reaction[]
  comments      Coment[]
  reactionCount Int     @default(0)
  commentsCount Int     @default(0)

  @@map("posts")
}

model Reaction {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String 
  emoji   String

  @@unique([userId, postId])
}

model Coment {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String 
  comment String

  @@unique([userId, postId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  location    String
  startDate   DateTime
  endDate     DateTime
  published   Boolean   @default(false)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Flyer {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String
  iframe      String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("flyers")
}

model Birthday {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  imageUrl  String?
  name      String
  data      DateTime

  @@map("birthdays")
}

model Vehicle {
  id          String   @id @default(cuid())
  model       String
  plate       String   @unique
  imageUrl    String
  enterprise  Enterprise
  kilometers  BigInt
  availble    Boolean  @default(true)
  rents       VehicleRent[]

  @@map("vehicles")
}

model VehicleRent {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId   String
  driver      String      @default("")
  passangers  String?
  destiny     String      @default("")
  startDate   DateTime    @default(now())
  possibleEnd DateTime?
  endDate     DateTime?
  finished    Boolean     @default(false)
  initialKm   BigInt?
  regIniKm    BigInt?
  finalKm     BigInt?
  endLocation Json?
  observation Json?

  @@map("vehicle_rents")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  enterprise  Enterprise
  imageUrl    String[]
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shopCarts   ShopCart[]
  sells       Sell[]

  @@map("products")
}

model ShopCart {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
  products    Product[]
  totalPrice  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("shop_cart")
}

model Sell {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  products        Product[]
  totalPrice      Float
  nfeId           Int?

  @@map("sells")
}

model Form {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  title           String
  description     String?
  fields          Json[]      @db.Json   
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  responses       FormResponse[]

  @@map("forms")
}

enum ResponseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model FormResponse {
  id              String         @id  @default(cuid())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  form            Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId          String
  responses       Json[]         @db.Json 
  status          ResponseStatus @default(NOT_STARTED)
  statusComment   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("forms_responses")
  FormResponseChat FormResponseChat[]
}

model FormResponseChat {
  id              String         @id  @default(cuid())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  formResponse    FormResponse   @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  formResponseId  String
  message         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("forms_responses_chat")
}

model Restaurant {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  city        String
  address     String
  phone       String
  email       String
  active      Boolean   @default(true)
  menuItems   MenuItem[]
  orders      FoodOrder[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("restaurants")
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?    @db.Text
  price        Float
  category     String     // Ex: "Prato Principal", "Sobremesa", "Bebida"
  available    Boolean    @default(true)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  options      MenuItemOption[]
  orders       FoodOrder[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("menu_items")
}

model MenuItemOption {
  id           String     @id @default(cuid())
  name         String     // Ex: "Tamanho", "Temperatura", "Adicionais"
  description  String?    @db.Text
  required     Boolean    @default(false) // Se o cliente deve escolher uma opção
  multiple     Boolean    @default(false) // Se pode escolher múltiplas opções
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId   String
  choices      MenuItemOptionChoice[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("menu_item_options")
}

model MenuItemOptionChoice {
  id                String           @id @default(cuid())
  name              String           // Ex: "Pequeno", "Médio", "Grande"
  priceModifier     Float            @default(0) // Modificador de preço (+ ou -)
  available         Boolean          @default(true)
  option            MenuItemOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId          String
  orderSelections   OrderOptionSelection[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("menu_item_option_choices")
}

model FoodOrder {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId   String
  orderDate    DateTime   // Data para qual o pedido é feito
  orderTime    DateTime   // Horário em que o pedido foi feito
  status       OrderStatus @default(PENDING)
  observations String?
  optionSelections OrderOptionSelection[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, orderDate]) // Um pedido por usuário por dia
  @@map("food_orders")
}

model OrderOptionSelection {
  id           String     @id @default(cuid())
  order        FoodOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  choice       MenuItemOptionChoice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  choiceId     String
  createdAt    DateTime   @default(now())

  @@map("order_option_selections")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

model OrderLog {
  id        String   @id @default(cuid())
  userId    String
  userName  String
  userEmail String
  month     Int      // 1-12
  year      Int
  totalOrders Int    @default(0)
  totalValue Float   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, year])
  @@map("order_logs")
}

