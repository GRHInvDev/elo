---
alwaysApply: true
description: "Padr√µes para documenta√ß√£o e coment√°rios no c√≥digo"
---

# Documenta√ß√£o e Coment√°rios

## JSDoc para Fun√ß√µes e Componentes
```typescript
/**
 * Hook personalizado para gerenciar estado de formul√°rios complexos
 * @param initialData - Dados iniciais do formul√°rio
 * @param validationSchema - Schema de valida√ß√£o Zod
 * @returns Objeto com estado e fun√ß√µes do formul√°rio
 *
 * @example
 * ```tsx
 * const { data, errors, setValue, validate } = useFormState({
 *   name: '',
 *   email: ''
 * }, userSchema)
 * ```
 */
export function useFormState<T extends Record<string, any>>(
  initialData: T,
  validationSchema?: z.ZodSchema<T>
): FormStateReturn<T> {
  // implementa√ß√£o
}

/**
 * Componente de cart√£o de usu√°rio com a√ß√µes
 * @param user - Dados do usu√°rio
 * @param onEdit - Callback chamado ao editar usu√°rio
 * @param onDelete - Callback chamado ao deletar usu√°rio
 * @param className - Classes CSS adicionais
 */
interface UserCardProps {
  user: User
  onEdit?: (user: User) => void
  onDelete?: (user: User) => void
  className?: string
}

export function UserCard({ user, onEdit, onDelete, className }: UserCardProps) {
  // implementa√ß√£o
}
```

## Coment√°rios Inline
```typescript
// ‚úÖ Bom: Coment√°rios explicativos
export function calculateUserScore(user: User): number {
  let score = 0

  // Pontua√ß√£o base por atividade
  score += user.postsCount * 2

  // B√¥nus por coment√°rios construtivos
  score += user.helpfulCommentsCount * 1.5

  // Penaliza√ß√£o por reports negativos
  score -= user.reportsCount * 5

  // Garantir score m√≠nimo de 0
  return Math.max(0, score)
}

// ‚ùå Ruim: Coment√°rios √≥bvios
export function calculateUserScore(user: User): number {
  let score = 0

  // Adicionar score
  score += user.postsCount * 2

  // Adicionar mais score
  score += user.helpfulCommentsCount * 1.5

  // Subtrair score
  score -= user.reportsCount * 5

  // Retornar score
  return Math.max(0, score)
}
```

## README e Documenta√ß√£o
```markdown
<!-- README.md -->
# ELO - Sistema de Gest√£o Empresarial

Sistema completo para gest√£o de usu√°rios, eventos, ve√≠culos e muito mais.

## üöÄ Funcionalidades

- **Gest√£o de Usu√°rios**: Cadastro, edi√ß√£o e controle de acesso granular
- **Sistema de Eventos**: Cria√ß√£o e gerenciamento de eventos corporativos
- **Controle de Ve√≠culos**: Aluguel e gest√£o da frota
- **Sistema de Notifica√ß√µes**: Notifica√ß√µes em tempo real
- **M√≥dulo de Alimenta√ß√£o**: Pedidos e gest√£o de restaurantes

## üõ†Ô∏è Tecnologias

- **Frontend**: Next.js 15, React 18, TypeScript
- **Backend**: tRPC, Prisma, PostgreSQL
- **Autentica√ß√£o**: Clerk
- **UI**: Tailwind CSS, shadcn/ui
- **Deploy**: Vercel

## üìÅ Estrutura do Projeto

```
src/
‚îú‚îÄ‚îÄ app/              # P√°ginas Next.js (App Router)
‚îú‚îÄ‚îÄ components/       # Componentes React reutiliz√°veis
‚îú‚îÄ‚îÄ hooks/           # Hooks customizados
‚îú‚îÄ‚îÄ lib/             # Utilit√°rios e configura√ß√µes
‚îú‚îÄ‚îÄ server/          # API e l√≥gica do servidor
‚îú‚îÄ‚îÄ types/           # Defini√ß√µes de tipos TypeScript
‚îú‚îÄ‚îÄ schemas/         # Schemas Zod para valida√ß√£o
‚îî‚îÄ‚îÄ trpc/            # Configura√ß√£o do tRPC
```

## üöÄ Instala√ß√£o e Execu√ß√£o

1. **Clone o reposit√≥rio**
   ```bash
   git clone https://github.com/seu-usuario/elo.git
   cd elo
   ```

2. **Instale as depend√™ncias**
   ```bash
   pnpm install
   ```

3. **Configure as vari√°veis de ambiente**
   ```bash
   cp .env.example .env.local
   ```

4. **Execute as migra√ß√µes do banco**
   ```bash
   pnpm db:migrate
   ```

5. **Inicie o servidor de desenvolvimento**
   ```bash
   pnpm dev
   ```

## üìö Scripts Dispon√≠veis

- `pnpm dev` - Inicia o servidor de desenvolvimento
- `pnpm build` - Build para produ√ß√£o
- `pnpm start` - Inicia o servidor de produ√ß√£o
- `pnpm lint` - Executa o linter
- `pnpm typecheck` - Verifica tipos TypeScript
- `pnpm db:generate` - Gera cliente Prisma
- `pnpm db:migrate` - Executa migra√ß√µes
- `pnpm db:studio` - Abre Prisma Studio

## üîß Configura√ß√£o

### Vari√°veis de Ambiente

```env
DATABASE_URL="postgresql://user:password@localhost:5432/elo"
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_key
CLERK_SECRET_KEY=your_clerk_secret
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

### Configura√ß√£o do Banco de Dados

O projeto utiliza PostgreSQL como banco de dados principal. As migra√ß√µes s√£o gerenciadas pelo Prisma.

## üß™ Testes

```bash
# Executar todos os testes
pnpm test

# Executar testes com cobertura
pnpm test:coverage

# Executar testes em modo watch
pnpm test:watch
```

## üìñ Documenta√ß√£o Adicional

- [Arquitetura do Sistema](docs/02-Arquitetura/README.md)
- [API tRPC](docs/04-API/trpc.md)
- [Padr√µes de Desenvolvimento](docs/06-Desenvolvimento/padroes.md)
- [Guia de Deploy](docs/07-Deploy/README.md)

## ü§ù Contribui√ß√£o

1. Fork o projeto
2. Crie uma branch para sua feature (`git checkout -b feature/nova-feature`)
3. Commit suas mudan√ßas (`git commit -m 'Adiciona nova feature'`)
4. Push para a branch (`git push origin feature/nova-feature`)
5. Abra um Pull Request

## üìù Licen√ßa

Este projeto est√° sob a licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.
```

## Documenta√ß√£o de API
```typescript
// server/api/routers/user.ts
import { createTRPCRouter, protectedProcedure } from "@/server/api/trpc"
import { z } from "zod"

/**
 * Router para opera√ß√µes relacionadas a usu√°rios
 *
 * Este router fornece endpoints para:
 * - Buscar usu√°rios
 * - Criar novos usu√°rios
 * - Atualizar dados de usu√°rios
 * - Gerenciar permiss√µes
 */
export const userRouter = createTRPCRouter({
  /**
   * Busca um usu√°rio pelo ID
   *
   * @param id - ID √∫nico do usu√°rio
   * @returns Dados completos do usu√°rio
   * @throws NOT_FOUND se o usu√°rio n√£o existir
   * @throws FORBIDDEN se n√£o tiver permiss√£o
   *
   * @example
   * ```typescript
   * const user = await api.user.getById.query({ id: "user-123" })
   * ```
   */
  getById: protectedProcedure
    .input(z.object({
      id: z.string().cuid("ID inv√°lido")
    }))
    .query(async ({ ctx, input }) => {
      // implementa√ß√£o
    }),

  /**
   * Lista usu√°rios com pagina√ß√£o e filtros
   *
   * @param limit - N√∫mero m√°ximo de resultados (padr√£o: 20)
   * @param offset - N√∫mero de resultados para pular (padr√£o: 0)
   * @param search - Termo de busca por nome ou email
   * @param enterprise - Filtro por empresa
   * @returns Lista paginada de usu√°rios
   *
   * @example
   * ```typescript
   * const users = await api.user.list.query({
   *   limit: 10,
   *   search: "Jo√£o",
   *   enterprise: "BOX"
   * })
   * ```
   */
  list: protectedProcedure
    .input(z.object({
      limit: z.number().min(1).max(100).default(20),
      offset: z.number().min(0).default(0),
      search: z.string().optional(),
      enterprise: z.nativeEnum(Enterprise).optional()
    }))
    .query(async ({ ctx, input }) => {
      // implementa√ß√£o
    })
})
```

## TODO Comments
```typescript
// ‚úÖ Bom: TODOs estruturados
// TODO: Implementar cache Redis para melhorar performance
// TODO: Adicionar testes de integra√ß√£o para fluxo de checkout
// FIXME: Corrigir c√°lculo de frete para regi√µes Norte/Nordeste
// HACK: Workaround tempor√°rio para compatibilidade IE11

export function calculateShipping(user: User, items: CartItem[]) {
  // FIXME: Esta f√≥rmula est√° incorreta para regi√µes espec√≠ficas
  const baseRate = 10
  const itemRate = items.length * 2

  // TODO: Implementar tabela de fretes por CEP
  return baseRate + itemRate
}
```

## Changelog
```markdown
<!-- CHANGELOG.md -->
# Changelog

Todas as mudan√ßas significativas neste projeto ser√£o documentadas neste arquivo.

O formato √© baseado em [Keep a Changelog](https://keepachangelog.com/pt-BR/1.0.0/),
e este projeto adere ao [Versionamento Sem√¢ntico](https://semver.org/lang/pt-BR/spec/v2.0.0.html).

## [N√£o lan√ßado]

### Adicionado
- Sistema de notifica√ß√µes em tempo real
- M√≥dulo de gest√£o de ve√≠culos
- Dashboard administrativo com m√©tricas

### Alterado
- Migra√ß√£o do sistema de roles para configura√ß√£o granular
- Atualiza√ß√£o da interface para shadcn/ui v2

### Corrigido
- Valida√ß√£o de formul√°rios em dispositivos m√≥veis
- Cache de imagens no m√≥dulo de eventos

## [1.4.0] - 2024-01-15

### Adicionado
- Suporte a m√∫ltiplas empresas (Box, RHenz, Cristallux)
- Sistema de pedidos de alimenta√ß√£o
- Integra√ß√£o com Google Calendar para eventos

### Alterado
- Reestrutura√ß√£o da arquitetura para microservi√ßos
- Atualiza√ß√£o do Next.js para v15

### Removido
- Depend√™ncia legacy do Moment.js (substitu√≠do por date-fns)

## [1.3.1] - 2023-12-01

### Corrigido
- Corre√ß√£o cr√≠tica de seguran√ßa no upload de arquivos
- Fix de memory leak no componente de calend√°rio
- Valida√ß√£o de permiss√µes em endpoints de API

### Seguran√ßa
- Atualiza√ß√£o de depend√™ncias vulner√°veis
- Implementa√ß√£o de rate limiting
- Sanitiza√ß√£o de inputs HTML
```

## Regras para Documenta√ß√£o
- Use JSDoc para todas as fun√ß√µes p√∫blicas e componentes
- Documente props de componentes com coment√°rios inline
- Mantenha README atualizado com informa√ß√µes essenciais
- Use TODO/FIXME para marcar itens pendentes
- Documente decis√µes arquiteturais importantes
- Mantenha changelog detalhado
- Use exemplos pr√°ticos em documenta√ß√£o
- Documente APIs com OpenAPI/Swagger quando aplic√°vel